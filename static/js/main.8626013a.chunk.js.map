{"version":3,"sources":["assets/translation/map.js","assets/translation/monster.js","app/components/main/Map.js","app/components/main/Monster.js","app/service/search/SearchContainer.js","app/service/main/MainContainer.js","app/components/main/Title.js","app/routes/router.js","Root.js","serviceWorker.js","index.js"],"names":["mapInfo","en","Woody-Weedy Forest/Woody-Wordy Forest","Mushroom Marshland","Mushroom Spore Cave","Wingfril Island Beach","Island with the Lighthouse","Lighthouse Dungeon 1F","Lighthouse Dungeon 2F","Lighthouse Dungeon 3F","Lighthouse Dungeon 4F","Lighthouse Dungeon 5F","Pirate Ship 1F","Pirate Ship 2F","Lanos Plains","Forest with Ruins","Arid Grassland","Forest of Grave","Kataru Mountains","Desert Valley","Hot Sand Plains","Ancient Palace","Western Sky Castle","Eastern Sky Castle","Stone Fortress","Unknown Maze","Fallen Temple","Temple of Wingfril","Polluted Forest","Marsh of Death","Maze Forest","Syphnel Road","Islot's Lab","Islot's Temple","Ghost Ship","Forgotten Cave","Silent Altar","Impassable Cave","Desert Dungeon","kr","우디 위디 숲/우디 워디 숲","monsterInfo","Kooii","Bramble Donguri","Leaf Boar","Angry Leaf Boar","Bulldozer Jr.","BULLDOZER","BULLDOZER'S BROTHER","Map","react_default","a","createElement","className","this","props","name","Component","Monster","src","alt","SearchContainer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","inputWord","handleChange","bind","assertThisInitialized","e","handleKeyword","target","value","setState","type","placeholder","autoFocus","onChange","MainContainer","lang","keyword","handleLang","makeList","_this2","indexList","keys","forEach","mapName","i","monsterList","filter","monsterName","toUpperCase","indexOf","length","push","key","Map_Map","map","j","Monster_Monster","info","SearchContainer_SearchContainer","onClick","Title","Fragment","router","react_router_dom","basename","Title_Title","react_router","exact","path","component","Root","router_router","Boolean","window","location","hostname","match","ReactDOM","render","src_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAAaA,EAAU,CACrBC,GAAI,CACFC,wCAAyC,CACvC,QACA,kBACA,YACA,kBACA,gBACA,YACA,uBAEFC,qBAAsB,CACpB,iBACA,mBACA,aACA,eACA,mBACA,eACA,eAEFC,sBAAuB,CACrB,gBACA,qBACA,kBACA,WACA,YACA,sBAEFC,wBAAyB,CACvB,SACA,WACA,UACA,QACA,QACA,eACA,mBACA,YAEFC,6BAA8B,CAC5B,SACA,WACA,QACA,QACA,eACA,mBACA,cAEFC,wBAAyB,CACvB,gBACA,gBACA,UACA,qBACA,WACA,SACA,gBACA,iBACA,cAEFC,wBAAyB,CACvB,WACA,WACA,gBACA,QACA,eACA,aACA,gBAEFC,wBAAyB,CACvB,QACA,mBACA,YACA,gBACA,UACA,MACA,WACA,YACA,UAEFC,wBAAyB,CACvB,gBACA,MACA,gBACA,cACA,UACA,YACA,YACA,YACA,gBAEFC,wBAAyB,CACvB,gBACA,cACA,QACA,YACA,gBACA,YAEFC,iBAAkB,CAAC,QAAS,UAAW,iBAAkB,mBACzDC,iBAAkB,CAChB,iBACA,kBACA,eACA,oBAEFC,eAAgB,CACd,sBACA,UACA,OACA,QACA,gBACA,gBACA,cAEFC,oBAAqB,CACnB,gBACA,iBACA,eACA,SACA,WACA,WACA,cAEFC,iBAAkB,CAChB,aACA,eACA,SACA,QACA,QACA,gBACA,UACA,kBACA,YAEFC,kBAAmB,CACjB,MACA,aACA,UACA,WACA,gBACA,iBACA,cAEFC,mBAAoB,CAClB,QACA,gBACA,YACA,YACA,cACA,qBACA,gBAEFC,gBAAiB,CACf,gBACA,YACA,kBACA,iBACA,eACA,aACA,UACA,OACA,WAEFC,kBAAmB,CACjB,SACA,cACA,WACA,gBACA,YACA,WACA,WAEFC,iBAAkB,CAChB,UACA,aACA,OACA,SACA,UACA,gBAEFC,qBAAsB,CACpB,SACA,SACA,SACA,iBACA,SACA,QACA,UAEFC,qBAAsB,CACpB,MACA,QACA,UACA,OACA,YACA,cACA,UACA,mBAEFC,iBAAkB,CAChB,aACA,WACA,QACA,iBACA,eACA,eAEFC,eAAgB,CACd,QACA,aACA,QACA,WACA,WACA,iBACA,aAEFC,gBAAiB,CACf,WACA,YACA,WACA,YACA,uBACA,cAEFC,qBAAsB,CACpB,gBACA,OACA,iBACA,iBACA,gBACA,gBACA,YACA,gBACA,iBACA,gBACA,WACA,sBAEFC,kBAAmB,CACjB,eACA,QACA,sBACA,cACA,UACA,qBACA,yBACA,2BAEFC,iBAAkB,CAChB,qBACA,gCACA,SACA,kBACA,SACA,iBACA,uBACA,UAEFC,cAAe,CACb,sBACA,gBACA,cACA,UACA,kBACA,YACA,gBACA,aACA,qBAEFC,eAAgB,CAAC,WAAY,OAC7BC,cAAe,CACb,WACA,MACA,UACA,SACA,QACA,mBAEFC,iBAAkB,CAChB,OACA,iBACA,SACA,YACA,QACA,iBACA,aAEFC,aAAc,CACZ,YACA,cACA,eACA,cACA,aACA,YACA,kBACA,cACA,mBACA,oBAEFC,iBAAkB,CAChB,gBACA,gBACA,WACA,eACA,YACA,cACA,eACA,eAEFC,eAAgB,CACd,gBACA,eACA,aACA,aACA,YACA,UACA,kBAEFC,kBAAmB,CACjB,cACA,QACA,cACA,aACA,WACA,UACA,iBAEFC,iBAAkB,CAChB,aACA,oBACA,aACA,gBACA,WACA,YAGJC,GAAI,CACFC,oEAAmB,KCvUVC,EAAc,CACzBxC,GAAI,CACFyC,MAAO,CAAC,EAAG,EAAG,EAAG,SAAU,GAAI,CAAC,QAAS,GACzCC,kBAAmB,GACnBC,YAAa,GACbC,kBAAmB,GACnBC,gBAAiB,GACjBC,UAAW,GACXC,sBAAuB,KCfNC,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,KAAKC,MAAMC,cAJbC,aCUZC,mLAEjB,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,KAAKC,MAAMC,MAC1CN,EAAAC,EAAAC,cAAA,OAAKO,IAAK,OAASL,KAAKC,MAAMC,KAAO,OAAQI,IAAI,g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","file":"static/js/main.8626013a.chunk.js","sourcesContent":["export const mapInfo = {\r\n  en: {\r\n    \"Woody-Weedy Forest/Woody-Wordy Forest\": [\r\n      \"Kooii\",\r\n      \"Bramble Donguri\",\r\n      \"Leaf Boar\",\r\n      \"Angry Leaf Boar\",\r\n      \"Bulldozer Jr.\",\r\n      \"BULLDOZER\",\r\n      \"BULLDOZER'S BROTHER\"\r\n    ],\r\n    \"Mushroom Marshland\": [\r\n      \"Swamp Mushroom\",\r\n      \"Flower Elemental\",\r\n      \"Swamp Boar\",\r\n      \"Swamp Spider\",\r\n      \"Poisonous Spider\",\r\n      \"White Spider\",\r\n      \"FUNGUS KING\"\r\n    ],\r\n    \"Mushroom Spore Cave\": [\r\n      \"Cave Mushroom\",\r\n      \"Poisonous Mushroom\",\r\n      \"Mushroom Flower\",\r\n      \"Cave Bat\",\r\n      \"White Bat\",\r\n      \"POISON FUNGUS KING\"\r\n    ],\r\n    \"Wingfril Island Beach\": [\r\n      \"Bottle\",\r\n      \"Red Crab\",\r\n      \"Sandman\",\r\n      \"Woopa\",\r\n      \"Roopa\",\r\n      \"Mutant Woopa\",\r\n      \"CHIEF WOOPAROOPA\",\r\n      \"TURTLE Z\"\r\n    ],\r\n    \"Island with the Lighthouse\": [\r\n      \"Bottle\",\r\n      \"Red Crab\",\r\n      \"Woopa\",\r\n      \"Roopa\",\r\n      \"Mutant Woopa\",\r\n      \"CHIEF WOOPAROOPA\",\r\n      \"TURTLE ZZZ\"\r\n    ],\r\n    \"Lighthouse Dungeon 1F\": [\r\n      \"Testing Woopa\",\r\n      \"Marsh Donguri\",\r\n      \"RECLUSE\",\r\n      \"Underground Spider\",\r\n      \"Skeleton\",\r\n      \"MADGAR\",\r\n      \"Gray Skeleton\",\r\n      \"SMALL SKELETON\",\r\n      \"BLACKSKULL\"\r\n    ],\r\n    \"Lighthouse Dungeon 2F\": [\r\n      \"Skeleton\",\r\n      \"Beholder\",\r\n      \"Drunken Kooii\",\r\n      \"Ghost\",\r\n      \"Sleepy Kooii\",\r\n      \"WHITESKULL\",\r\n      \"AWAKEN KOOII\"\r\n    ],\r\n    \"Lighthouse Dungeon 3F\": [\r\n      \"Ghost\",\r\n      \"Snaketail Lizard\",\r\n      \"SNAKEZARD\",\r\n      \"Dark Beholder\",\r\n      \"Spector\",\r\n      \"Imp\",\r\n      \"EEHEEHEE\",\r\n      \"OOHEEHEEK\",\r\n      \"OOHEHE\"\r\n    ],\r\n    \"Lighthouse Dungeon 4F\": [\r\n      \"Dark Beholder\",\r\n      \"Imp\",\r\n      \"Bloody Flower\",\r\n      \"Bloody Mind\",\r\n      \"Dan Dan\",\r\n      \"Ding Ding\",\r\n      \"Dong Dong\",\r\n      \"Dung Dung\",\r\n      \"GUARDIAN IMP\"\r\n    ],\r\n    \"Lighthouse Dungeon 5F\": [\r\n      \"Bloody Flower\",\r\n      \"Bloody Mind\",\r\n      \"Mummy\",\r\n      \"Elite Imp\",\r\n      \"Mummy Fighter\",\r\n      \"DEVILANG\"\r\n    ],\r\n    \"Pirate Ship 1F\": [\"Broom\", \"Sweeper\", \"Treasure Chest\", \"Pirate Skeleton\"],\r\n    \"Pirate Ship 2F\": [\r\n      \"Treasure Chest\",\r\n      \"Pirate Skeleton\",\r\n      \"Pirate Ghost\",\r\n      \"BOATSWAIN BRANKA\"\r\n    ],\r\n    \"Lanos Plains\": [\r\n      \"Continent Bulldozer\",\r\n      \"Blaster\",\r\n      \"Crow\",\r\n      \"Raven\",\r\n      \"Redeye Gosumi\",\r\n      \"Bloody Gosumi\",\r\n      \"WHITE CROW\"\r\n    ],\r\n    \"Forest with Ruins\": [\r\n      \"Mutant Gosumi\",\r\n      \"Berserk Gosumi\",\r\n      \"Large Spider\",\r\n      \"Spidey\",\r\n      \"Big Boar\",\r\n      \"Wildboar\",\r\n      \"GHOSTSNAKE\"\r\n    ],\r\n    \"Arid Grassland\": [\r\n      \"Cactus Bee\",\r\n      \"Sand Donguri\",\r\n      \"Bizizi\",\r\n      \"Doley\",\r\n      \"Buzss\",\r\n      \"Desert Ambush\",\r\n      \"Stealth\",\r\n      \"Desert Assassin\",\r\n      \"BSSSZSSS\"\r\n    ],\r\n    \"Forest of Grave\": [\r\n      \"Fox\",\r\n      \"Mature Fox\",\r\n      \"Red Fox\",\r\n      \"7tailfox\",\r\n      \"Sunset Flower\",\r\n      \"Sunrise Flower\",\r\n      \"777TAILFOX\"\r\n    ],\r\n    \"Kataru Mountains\": [\r\n      \"Magma\",\r\n      \"Burning Stone\",\r\n      \"Fire Bird\",\r\n      \"Bbinikjoe\",\r\n      \"Magma Thief\",\r\n      \"Magma Senior Thief\",\r\n      \"CHIEF MAGIEF\"\r\n    ],\r\n    \"Desert Valley\": [\r\n      \"Desert Gosumi\",\r\n      \"Sandgrave\",\r\n      \"Desert Beholder\",\r\n      \"Elder Beholder\",\r\n      \"Wild Sandman\",\r\n      \"3eyelizard\",\r\n      \"Sususuk\",\r\n      \"Suuk\",\r\n      \"SHAAACK\"\r\n    ],\r\n    \"Hot Sand Plains\": [\r\n      \"Shadow\",\r\n      \"Mind Scream\",\r\n      \"Wanderer\",\r\n      \"Lesser Madman\",\r\n      \"Sandeater\",\r\n      \"Bigmouse\",\r\n      \"BIGMAMA\"\r\n    ],\r\n    \"Ancient Palace\": [\r\n      \"Sky Bat\",\r\n      \"Silver Bat\",\r\n      \"IPot\",\r\n      \"Puppet\",\r\n      \"Tornado\",\r\n      \"Dark Tornado\"\r\n    ],\r\n    \"Western Sky Castle\": [\r\n      \"Goblin\",\r\n      \"Couatl\",\r\n      \"Kobold\",\r\n      \"Goblin Warrior\",\r\n      \"Zealot\",\r\n      \"Gnome\",\r\n      \"Tyrant\"\r\n    ],\r\n    \"Eastern Sky Castle\": [\r\n      \"Orb\",\r\n      \"Storm\",\r\n      \"Bulette\",\r\n      \"Tank\",\r\n      \"Maelstrom\",\r\n      \"Swirl Flame\",\r\n      \"Twister\",\r\n      \"Elemental Queen\"\r\n    ],\r\n    \"Stone Fortress\": [\r\n      \"Solid Rock\",\r\n      \"Gargoyle\",\r\n      \"Golem\",\r\n      \"Black Gargoyle\",\r\n      \"Ominous Bird\",\r\n      \"Stonestatue\"\r\n    ],\r\n    \"Unknown Maze\": [\r\n      \"Aroid\",\r\n      \"Iron Golem\",\r\n      \"Robot\",\r\n      \"Humanoid\",\r\n      \"Landmine\",\r\n      \"Titanium Golem\",\r\n      \"Steampunk\"\r\n    ],\r\n    \"Fallen Temple\": [\r\n      \"Darkness\",\r\n      \"Protector\",\r\n      \"Guardian\",\r\n      \"Inspector\",\r\n      \"Fear of the Darkness\",\r\n      \"Gatekeeper\"\r\n    ],\r\n    \"Temple of Wingfril\": [\r\n      \"Crystal Stone\",\r\n      \"Yeti\",\r\n      \"Wing Elemental\",\r\n      \"Crystal Spider\",\r\n      \"Guardian Yeti\",\r\n      \"Young Pengoon\",\r\n      \"BLACKJUNO\",\r\n      \"Crazy Pengoon\",\r\n      \"Yeti Highguard\",\r\n      \"Enraged Wings\",\r\n      \"BLACKSKY\",\r\n      \"WADANGKA THE ELDER\"\r\n    ],\r\n    \"Polluted Forest\": [\r\n      \"Enraged Tree\",\r\n      \"Smack\",\r\n      \"Man-eating Mushroom\",\r\n      \"Mutated Bee\",\r\n      \"Smaaack\",\r\n      \"Poison Root Flower\",\r\n      \"Contaminated Queen Bee\",\r\n      \"Corrupted Forest Keeper\"\r\n    ],\r\n    \"Marsh of Death\": [\r\n      \"Young Froggy Swarm\",\r\n      \"Poisonous Man-eating Mushroom\",\r\n      \"Zombie\",\r\n      \"Mutated Lobster\",\r\n      \"Froggy\",\r\n      \"Rotten Pudding\",\r\n      \"Swamp Flower Monster\",\r\n      \"Ukpana\"\r\n    ],\r\n    \"Maze Forest\": [\r\n      \"Ancient Elf Crystal\",\r\n      \"Plague Zombie\",\r\n      \"Egg Monster\",\r\n      \"Banshee\",\r\n      \"Masked Magician\",\r\n      \"Hellhound\",\r\n      \"Death Stalker\",\r\n      \"Dark Golem\",\r\n      \"Darlene the Witch\"\r\n    ],\r\n    \"Syphnel Road\": [\"Snowball\", \"Uru\"],\r\n    \"Islot's Lab\": [\r\n      \"Snowball\",\r\n      \"Uru\",\r\n      \"Sharkun\",\r\n      \"Snoowy\",\r\n      \"Urpus\",\r\n      \"Mutated Sharkun\"\r\n    ],\r\n    \"Islot's Temple\": [\r\n      \"Urun\",\r\n      \"Strong Sharkun\",\r\n      \"Shurun\",\r\n      \"Sharkurus\",\r\n      \"Urtus\",\r\n      \"Mutated Shurun\",\r\n      \"Sharkutus\"\r\n    ],\r\n    \"Ghost Ship\": [\r\n      \"Blood Bat\",\r\n      \"Tough Mimic\",\r\n      \"Violent Crew\",\r\n      \"White Ghost\",\r\n      \"Weary Crew\",\r\n      \"Bomb Wing\",\r\n      \"Jack in the Box\",\r\n      \"Ghost Witch\",\r\n      \"CAPTAIN TWIN (2)\",\r\n      \"CAPTAIN TWIN (1)\"\r\n    ],\r\n    \"Forgotten Cave\": [\r\n      \"Poison Lizard\",\r\n      \"Big Eyed Soul\",\r\n      \"Dark Imp\",\r\n      \"Poison Mummy\",\r\n      \"Magic Imp\",\r\n      \"Evil Spirit\",\r\n      \"Walking Dead\",\r\n      \"MUTANTHYDRA\"\r\n    ],\r\n    \"Silent Altar\": [\r\n      \"Altar Cleaner\",\r\n      \"Silent Ghost\",\r\n      \"Rock Golem\",\r\n      \"Fluid Form\",\r\n      \"Morphling\",\r\n      \"Mystery\",\r\n      \"MALTARGUARDIAN\"\r\n    ],\r\n    \"Impassable Cave\": [\r\n      \"Cave Spider\",\r\n      \"Hairy\",\r\n      \"Cave Keeper\",\r\n      \"Light Wing\",\r\n      \"DARKJUNO\",\r\n      \"GRAYSKY\",\r\n      \"WHITEWADANGKA\"\r\n    ],\r\n    \"Desert Dungeon\": [\r\n      \"Silhouette\",\r\n      \"Underground Eater\",\r\n      \"Bandageman\",\r\n      \"Reason Scream\",\r\n      \"Gluttony\",\r\n      \"THEMAMA\"\r\n    ]\r\n  },\r\n  kr: {\r\n    \"우디 위디 숲/우디 워디 숲\": []\r\n  }\r\n};\r\n","/*\r\n\"level\": integer\r\n\"attack range\": 0 , 1 // short | long\r\n\"attack style\": 0 , 1 // first attack | second attack \r\n\"respawn time\": string\r\n\"exp\": interge\r\n\"drop item\": list\r\n\"type\": 0,1,2 // normal, semi-boss, boss\r\n*/\r\nexport const monsterInfo = {\r\n  en: {\r\n    Kooii: [1, 0, 1, \"30 sec\", 60, [\"gold\"], 0],\r\n    \"Bramble Donguri\": [],\r\n    \"Leaf Boar\": [],\r\n    \"Angry Leaf Boar\": [],\r\n    \"Bulldozer Jr.\": [],\r\n    BULLDOZER: [],\r\n    \"BULLDOZER'S BROTHER\": []\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Map extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Map\">\r\n        <div className=\"Map-name\">{this.props.name}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\n/*\r\n\"level\": integer\r\n\"attack range\": 0 , 1 // short | long\r\n\"attack style\": 0 , 1 // first attack | second attack \r\n\"respawn time\": string\r\n\"exp\": interge\r\n\"drop item\": list\r\n\"type\": 0,1,2 // normal, semi-boss, boss\r\n*/\r\n\r\nexport default class Monster extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Monster\">\r\n        <div className=\"Monster-name\">{this.props.name}</div>\r\n        <img src={\"img/\" + this.props.name + \".png\"} alt=\"img\" />\r\n        {/* <div className=\"Monster-lvl\">{console.log(this.props.info)}</div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./SearchContainer.scss\";\r\n\r\nexport default class SearchContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputWord: \"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.props.handleKeyword(e.target.value);\r\n    this.setState({\r\n      inputWord: e.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Search\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"Search-input\"\r\n          placeholder=\"Search\"\r\n          autoFocus\r\n          value={this.inputWord}\r\n          onChange={this.handleChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport { mapInfo } from \"assets/translation/map.js\";\r\nimport { monsterInfo } from \"assets/translation/monster.js\";\r\n\r\nimport Map from \"app/components/main/Map\";\r\nimport Monster from \"app/components/main/Monster\";\r\n\r\nimport SearchBox from \"app/service/search/SearchContainer\";\r\n// import Item from \"app/components/main/Item\";\r\n\r\nimport \"./MainContainer.scss\";\r\n\r\nexport default class MainContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lang: \"en\",\r\n      keyword: \"\"\r\n    };\r\n    this.handleLang = this.handleLang.bind(this);\r\n    this.handleKeyword = this.handleKeyword.bind(this);\r\n    this.makeList = this.makeList.bind(this);\r\n  }\r\n\r\n  handleLang() {\r\n    if (this.state.lang === \"en\") {\r\n      this.setState({\r\n        lang: \"kr\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        lang: \"en\"\r\n      });\r\n    }\r\n  }\r\n\r\n  handleKeyword(value) {\r\n    this.setState({\r\n      keyword: value\r\n    });\r\n  }\r\n\r\n  makeList() {\r\n    /* Map */\r\n    let indexList = [];\r\n\r\n    Object.keys(mapInfo[this.state.lang]).forEach((mapName, i) => {\r\n      /* Monsters*/\r\n      let monsterList = mapInfo[this.state.lang][mapName].filter(\r\n        monsterName =>\r\n          monsterName\r\n            .toUpperCase()\r\n            .indexOf(this.state.keyword.toUpperCase()) !== -1\r\n      );\r\n      if (monsterList.length !== 0) {\r\n        indexList.push(\r\n          <div key={i}>\r\n            <Map name={mapName} />\r\n            {monsterList.map((monsterName, j) => (\r\n              <Monster\r\n                name={monsterName}\r\n                info={monsterInfo[this.state.lang][monsterName]}\r\n                key={j}\r\n              />\r\n            ))}\r\n          </div>\r\n        );\r\n      } else {\r\n        if (\r\n          mapName.toUpperCase().indexOf(this.state.keyword.toUpperCase()) !== -1\r\n        ) {\r\n          indexList.push(\r\n            <div key={i}>\r\n              <Map name={mapName} />\r\n              {mapInfo[this.state.lang][mapName].map((monsterName, j) => (\r\n                <Monster\r\n                  name={monsterName}\r\n                  info={monsterInfo[this.state.lang][monsterName]}\r\n                  key={j}\r\n                />\r\n              ))}\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    return indexList;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Main\">\r\n        <SearchBox handleKeyword={this.handleKeyword} />\r\n        <button onClick={this.handleLang}>언어 변경</button>\r\n        {this.makeList()}\r\n        <div>많은 내용은 아이모 Fandom에서 가져왔습니다. </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Title extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Title\">\r\n        TWOM-Wiki\r\n        <></>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport MainContainer from \"app/service/main/MainContainer\";\r\nimport Title from \"app/components/main/Title\";\r\n\r\nexport default class router extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter basename=\"/TWOM-Wiki\">\r\n        <>\r\n          <Title />\r\n          <Route exact path=\"/\" component={MainContainer} />\r\n          <Switch>\r\n            <Route path=\"/hello\" />\r\n          </Switch>\r\n        </>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\n\nimport Router from \"./app/routes/router\";\n\nfunction Root() {\n  return (\n    <div className=\"Root\">\n      <Router />\n    </div>\n  );\n}\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport Root from \"./Root\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}